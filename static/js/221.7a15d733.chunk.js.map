{"version":3,"file":"static/js/221.7a15d733.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ListItem/ListItem.jsx","components/List/List.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { Formik, Form, Field } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { postContact } from '../../redux/contacts/api';\nimport Button from '@mui/material/Button';\nimport {TextField} from 'formik-material-ui';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const { items } = useSelector(state => state.contacts.contacts)\n  const addSomeContact = (contact) => {\n    dispatch(postContact(contact))\n  }\n  return (<div>\n    <h1>Phonebook</h1>\n    <Formik\n      initialValues = {{\n        name: '',\n        number: ''\n      }}\n      onSubmit={(values, actions) => {\n        actions.resetForm();\n        const hasContact = items.some(item => item.name.toLowerCase() === values.name.toLowerCase())\n        if (!hasContact) {\n          addSomeContact(values);\n        } else {\n          alert(`${values.name} is already in contacts`);\n        }\n      }}>\n      <Form className='form-add-contact'>\n        <Field component={TextField} size=\"small\" width='500px' border='success' id=\"name\" name=\"name\" placeholder=\"Name*\" required />\n        <Field component={TextField} size=\"small\" id=\"tel\" name=\"number\" type=\"tel\" placeholder=\"Your tel*\" required />\n        <Button variant=\"contained\" type=\"submit\" color=\"success\" size=\"large\">Send</Button>\n      </Form>\n    </Formik>\n  </div>)\n}\n","import { useDispatch } from 'react-redux';\nimport { updateQuery } from '../../redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return <div>\n    <h2>Contacts</h2>\n    <input type='text' name='filter' onChange={e => dispatch(updateQuery(e.target.value))} />\n  </div>\n}\n","import { useDispatch } from 'react-redux';\nimport { removeContact } from '../../redux/contacts/api';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\n\nexport const ListItem = ({id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const remove = () => {\n    dispatch(removeContact(id));\n  }\n\n  return (\n    <div>\n      {name}: <span>{number}</span>\n       <button type='button' onClick={remove}><DeleteIcon /></button>\n    </div>\n  )\n}\n","import { ListItem } from '../ListItem/ListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contacts/api';\n\nexport const List = () => {\n  const dispatch = useDispatch();\n  const { items, isLoading, error } = useSelector(state => state.contacts.contacts);\n\n  const filter = useSelector(state => state.contacts.filter);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contactArr = items.filter(item => {\n    return item.name.toLowerCase().includes(filter);\n  })\n\n  return <>\n    {isLoading && <h2>Loading</h2>}\n    {error && <h2>{error}</h2>}\n    {items.length > 0 && <ul>\n      {contactArr.map(contact => (\n        <li key={contact.id}>\n          <ListItem id={contact.id} name={contact.name} number={contact.number} />\n        </li>\n      ))}\n    </ul>}\n  </>\n\n}\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { List } from '../components/List/List';\n\nexport default function ContactsPage() {\n  return <>\n    <ContactForm />\n    <Filter />\n    <List />\n  </>\n}\n"],"names":["ContactForm","dispatch","useDispatch","items","useSelector","state","contacts","_jsxs","children","_jsx","Formik","initialValues","name","number","onSubmit","values","actions","contact","resetForm","some","item","toLowerCase","alert","concat","postContact","Form","className","Field","component","TextField","size","width","border","id","placeholder","required","type","Button","variant","color","Filter","onChange","e","updateQuery","target","value","ListItem","_ref","onClick","removeContact","DeleteIcon","List","_useSelector","isLoading","error","filter","useEffect","fetchContacts","contactArr","includes","_Fragment","length","map","ContactsPage"],"sourceRoot":""}